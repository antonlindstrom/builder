#!/usr/bin/env bash

set -euo pipefail

main() {
	local output exit_code config_file

	output="$(mktemp)"
	config_file=/config/phpcs/ruleset.xml
	php_pattern='\.php$'

	local -a args=("--report=json" "--report-file=${output}")

	echo '~~~ Software versions'
	echo '$ phpcs --version'
	phpcs --version

	echo '~~~ Preparing configuration options'
	if [ -f "${config_file}" ]; then
		echo 'INFO: using custom ruleset.xml'
		args+=("--standard=${config_file}")
	else
		echo 'INFO: no custom ruleset.xml found; using defaults.'
	fi

	echo '~~~ Generating file list'

	if [ -f ".teamci_test_files" ]; then
		if grep -qE "${php_pattern}" .teamci_test_files; then
			echo 'INFO: selecting files for phpcs'
			while read -r file; do
				args+=( "${file}" )
			done < <(grep -E "${php_pattern}" .teamci_test_files)
		else
			echo 'INFO: no testable files in list; skipping'
			return 7
		fi
	else
		echo 'INFO: testing all files'
		args+=( "." )
	fi

	echo '~~~ Running phpcs'
	set +e
	phpcs "${args[@]}"
	exit_code=$?
	set -e

	if [ "${exit_code}" -eq 3 ]; then
		echo 'ERROR: internal error'
		return 1
	fi

	if [ "$(jq -re '.files | length' "${output}")" -eq 0 ]; then
		echo 'INFO: No files found, skipping'
		return 7
	fi

	tapify.rb < "${output}"

	if [ "${exit_code}" -eq 0 ]; then
		return 0
	else
		return 1
	fi
}

main "$@"
