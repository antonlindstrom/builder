#!/usr/bin/env bash

set -euo pipefail

declare scratch access_token_url token
declare repo head_sha head_branch

echo '~~~ Fetching Access Token'

scratch="$(mktemp)"
access_token_url="$(buildkite-agent meta-data get teamci.access_token_url)"

curl -H 'Accept: application/json' "${access_token_url}" > "${scratch}"

token="$(jq -re '.token' "${scratch}")"

if [ -z "${token}" ]; then
	echo "Could not get access token" 1>&2
	return 7
fi

echo '~~~ Setting Check Title'

buildkite-agent meta-data set "teamci.${BUILDKITE_LABEL}.title" 'General purpose linting'

echo '~~~ Cloning Target Code'
repo="$(buildkite-agent meta-data get teamci.repo.slug)"
head_sha="$(buildkite-agent meta-data get teamci.head_sha)"
head_branch="$(buildkite-agent meta-data get teamci.head_branch)"

if [ -z "${repo}" ] || [ -z "${head_sha}" ] || [ -z "${head_branch}" ]; then
	echo "Missing repo/sha/branch metadata" 1>&2
	exit 7
fi

code_dir="${TEAMCI_CODE_DIR}/${repo}"

if [ -d "${code_dir}/.git" ]; then
	pushd "${code_dir}" > /dev/null

	git remote set-url origin "https://x-access-token:${token}@github.com/${repo}.git"
else
	mkdir -p "${code_dir}"

	git clone -v "https://x-access-token:${token}@github.com/${repo}.git" "${code_dir}"

	pushd "${code_dir}" > /dev/null
fi

git fetch -v --prune origin "${head_branch}"
git checkout -f "${head_sha}"

if [ -x .teamci/lint/ls-files ]; then
	echo '~~~ Using file list from: .teamci/lint/ls-files'
	.teamci/lint/ls-files > "${scratch}"
else
	echo '~~~ Using files list from: git ls-files'
	git ls-files > "${scratch}"
fi

popd > /dev/null

echo '~~~ Running Lint Test'
docker-compose run --rm -v "${code_dir}:/code" -w "/code" lint < "${scratch}"
